@using CentreBookingUI.Models;

@inject IJSRuntime jsRuntime
@inject HttpClient HttpClient

<br />
@if (centres == null)
{
    <p>No list available</p>
}
else if (centres != null && !centres.Any())
{
    <p>Loading centres...</p>
}
else if (centres != null && centres.Any())
{
    <ul>
        @foreach (var centre in centres)
        {
            <li>@centre.CentreName</li>
        }
    </ul>
}
<br />

@code {
    private static readonly string _apiurl = "http://localhost:5249/api/CentreBookingApplication/";

    [Parameter]
    public List<Centre> centres { get; set; } = new List<Centre>();

    protected override async Task OnInitializedAsync()
    {
        string api_request = _apiurl + "get-centres";

        var response = await HttpClient.GetAsync(api_request);

        /**
         * if the error is due to no centre data available in the DB,
         * we do not throw an alert, but we show No list available instead.
         *
         * we will only throw this alert whenever something unexpected happened in DB.
         */
        if (response.IsSuccessStatusCode)
        {
            centres = await response.Content.ReadFromJsonAsync<List<Centre>>();
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            centres = null;
        }
        else
        {
            ShowAlert("Unable to load centre");
        }
    }

    private void ShowAlert(string msg)
    {
        jsRuntime.InvokeVoidAsync("alert", msg);
    }

    /***
    * Although DisplayCentre.razor is shared by ADMIN and GUEST,
    *
    * This will only be called by ADMIN when a new centre is added
    * to refresh the list of centre again.
       */
    public async void RefreshCentreList()
    {
        await OnInitializedAsync();
        StateHasChanged();
    }
}