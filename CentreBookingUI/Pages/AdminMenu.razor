@page "/admin-menu"

@using Blazored.Toast.Services;
@using CentreBookingUI.Models
@using CentreBookingUI.Shared

@inject HttpClient HttpClient
@inject IJSRuntime jsRuntime
@inject IToastService ToastService

<h3>Admin Menu</h3>

<DisplayCentre @ref="displayCentre" isAdmin="true"/>

@* Button for register new centre is hidden when the form to register new centre is shown *@
@if (!IsRegistrationFormVisible)
{
    <button @onclick="AddCentre">Register New Centre</button>
}

@if (IsRegistrationFormVisible)
{
    <div>
        <form @onsubmit="OnCentreSubmit">
            <input type="text" placeholder="Centre Name" @bind="NewCentreName"/>
            <button type="submit">Confirm</button>
        </form>
        <br/>
        <button @onclick="CancelAdd">Cancel</button>
    </div>
}

@code {
    private static readonly string _apiurl = "http://localhost:5249/api/CentreBookingApplication/";

    private DisplayCentre? displayCentre;

    private bool IsRegistrationFormVisible = false;
    private string? NewCentreName { get; set; }

    private void AddCentre()
    {
        IsRegistrationFormVisible = true;
    }

    private void CancelAdd()
    {
        IsRegistrationFormVisible = false;
    }

    private async Task OnCentreSubmit()
    {
        string api_request_url = _apiurl + "post-centre";

        // building the centre object to be passed into POST API
        Centre centre = new Centre();
        centre.CentreName = NewCentreName;

        var response = await HttpClient.PostAsJsonAsync(api_request_url, centre);
        if (response.IsSuccessStatusCode)
        {
            // form should be hidden when it is done submitting
            IsRegistrationFormVisible = false;
            NewCentreName = "";

            // refresh child component (DisplayCentre.razor) 
            // to show the updated list
            displayCentre.RefreshCentreList();
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            var errorMessage = $"Error: {errorContent}";
            ShowAlert(errorMessage);
        }
    }

    private void ShowAlert(string msg)
    {
        jsRuntime.InvokeVoidAsync("alert", msg);
    }

    /*
    private void ShowSuccess(string msg)
    {
        ToastService.ShowSuccess(msg);
    }

    private void ShowError(string msg)
    {
        ToastService.ShowError(msg);
    }

    private void ShowWarning(string msg)
    {
        ToastService.ShowWarning(msg);
    }

    private void ShowInfo(string msg)
    {
        ToastService.ShowInfo(msg);
    } 
    */

}
