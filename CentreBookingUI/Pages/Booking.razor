@page "/book-page/{CentreName}"

@using CentreBookingUI.Models

@inject HttpClient HttpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager

<h3>Booking for @CentreName</h3>

<form @onsubmit="OnBookingSubmit">
    <label for="guest-name">Guest Name</label>
    <input id="guest-name" type="text" @bind-value="GuestName"/>
    <label for="start-date">Start Date</label>
    <InputDate id="start-date" @bind-Value="StartDate"/>
    <label for="end-date">End Date</label>
    <InputDate id="end-date" @bind-Value="EndDate"/>
    <button type="submit">Confirm</button>
</form>

@code {
    private static readonly string _apiurl = "http://localhost:5249/api/CentreBookingApplication/";

    [Parameter]
    public string CentreName { get; set; } = "";

    private string GuestName { get; set; } = "";
    private DateOnly StartDate { get; set; }
    private DateOnly EndDate { get; set; }

    protected override void OnInitialized()
    {
        StartDate = DateOnly.FromDateTime(DateTime.Today);
        EndDate = DateOnly.FromDateTime(DateTime.Today);
    }

    private async Task OnBookingSubmit()
    {
        Models.Booking booking = new Models.Booking();
        booking.CentreName = CentreName;
        booking.GuestName = GuestName;
        booking.StartDate = StartDate;
        booking.EndDate = EndDate;

        bool allowedToBook = await UserCanBook(booking);
        if (allowedToBook)
        {
            string api_request_url = _apiurl + "post-booking";


            var response = await HttpClient.PostAsJsonAsync(api_request_url, booking);
            if (response.IsSuccessStatusCode)
            {
                ShowAlert("Booking completed!");
                NavigationManager.NavigateTo("../");
            }
            else
            {
                ShowAlert("Error while registering your booking");
            }
        }
    }

    private async Task<bool> UserCanBook(Models.Booking booking)
    {
        if (StartDate < DateOnly.FromDateTime(DateTime.Now))
        {
            ShowAlert("Start date cannot be earlier than today's date!");
            return false;
        }

        if (EndDate < DateOnly.FromDateTime(DateTime.Now))
        {
            ShowAlert("End date cannot be earlier than today's date!");
            return false;
        }

        if (EndDate < StartDate)
        {
            ShowAlert("End date cannot be earlier than Start date!");
            return false;
        }

        string api_request = _apiurl + "get-booking/" + CentreName;

        var response = await HttpClient.GetAsync(api_request);

        if (response.IsSuccessStatusCode)
        {
            List<Models.Booking> takenBookings = 
                await response.Content.ReadFromJsonAsync<List<Models.Booking>>();    
            foreach (var takenBooking in takenBookings)
            {
                if (takenBooking.EndDate > booking.StartDate)
                {
                    ShowAlert("Start Date: " + booking.StartDate.ToString("dd-MM-yyyy") + " has already been booked!");
                    return false;
                }
            }
        }
        else
        {
            ShowAlert("Error while getting booking results");
            return false;
        }
        return true;
    }

    private void ShowAlert(string msg)
    {
        jsRuntime.InvokeVoidAsync("alert", msg);
    }
}
